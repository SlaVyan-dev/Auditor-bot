import os
import re
import discord
import datetime
from discord.ext import commands
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
intents = discord.Intents.all()
bot = commands.Bot(command_prefix='!', intents=intents)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('DISCORD_BOT_TOKEN')
LOG_CHANNEL_ID = int(os.getenv('LOG_CHANNEL_ID'))


class Logger:
    @staticmethod
    def create_embed(title, description, color):
        return discord.Embed(
            title=title,
            description=description,
            color=color,
            timestamp=datetime.datetime.now(datetime.timezone.utc)
        )

    @staticmethod
    async def send_log(embed):
        channel = bot.get_channel(LOG_CHANNEL_ID)
        if channel:
            try:
                await channel.send(embed=embed)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")


# –°–æ–±—ã—Ç–∏—è –±–æ—Ç–∞
@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! (ID: {bot.user.id})')
    await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name="–∑–∞ —Å–µ—Ä–≤–µ—Ä–æ–º"))


# –£—á–∞—Å—Ç–Ω–∏–∫–∏
@bot.event
async def on_member_join(member):
    embed = Logger.create_embed(
        "üü¢ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫",
        f"{member.mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É\n"
        f"**–°–æ–∑–¥–∞–Ω:** {member.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"**ID:** {member.id}",
        discord.Color.green()
    )
    await Logger.send_log(embed)


@bot.event
async def on_member_remove(member):
    roles = [role.mention for role in member.roles if role.name != "@everyone"]
    roles_text = ", ".join(roles) if roles else "–ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∏–∫
    try:
        async for entry in member.guild.audit_logs(limit=1, action=discord.AuditLogAction.kick):
            if entry.target.id == member.id:
                embed = Logger.create_embed(
                    "üë¢ –£—á–∞—Å—Ç–Ω–∏–∫ –∫–∏–∫–Ω—É—Ç",
                    f"**–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention}\n"
                    f"**ID:** {member.id}\n"
                    f"**–†–æ–ª–∏:** {roles_text}",
                    discord.Color.orange()
                )
                embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=entry.user.mention)
                if entry.reason:
                    embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=entry.reason)
                await Logger.send_log(embed)
                return
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

    embed = Logger.create_embed(
        "üî¥ –£—á–∞—Å—Ç–Ω–∏–∫ –≤—ã—à–µ–ª",
        f"**–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention}\n"
        f"**ID:** {member.id}\n"
        f"**–†–æ–ª–∏:** {roles_text}",
        discord.Color.red()
    )
    await Logger.send_log(embed)


# –ú–æ–¥–µ—Ä–∞—Ü–∏—è
@bot.event
async def on_member_ban(guild, user):
    embed = Logger.create_embed(
        "üî® –ë–∞–Ω",
        f"**–£—á–∞—Å—Ç–Ω–∏–∫:** {user.mention}\n"
        f"**ID:** {user.id}",
        discord.Color.dark_red()
    )

    try:
        async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.ban):
            if entry.target.id == user.id:
                embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=entry.user.mention)
                if entry.reason:
                    embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=entry.reason)
                break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

    await Logger.send_log(embed)


@bot.event
async def on_member_unban(guild, user):
    embed = Logger.create_embed(
        "üîì –†–∞–∑–±–∞–Ω",
        f"**–£—á–∞—Å—Ç–Ω–∏–∫:** {user.mention}\n"
        f"**ID:** {user.id}",
        discord.Color.green()
    )

    try:
        async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.unban):
            if entry.target.id == user.id:
                embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=entry.user.mention)
                if entry.reason:
                    embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=entry.reason)
                break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

    await Logger.send_log(embed)


@bot.event
async def on_member_update(before, after):
    # –ú—å—é—Ç
    if before.timed_out_until != after.timed_out_until:
        if after.timed_out_until:
            embed = Logger.create_embed(
                "üîá –ú—å—é—Ç",
                f"**–£—á–∞—Å—Ç–Ω–∏–∫:** {after.mention}\n"
                f"**–î–æ:** {after.timed_out_until.strftime('%d.%m.%Y %H:%M')}",
                discord.Color.dark_grey()
            )

            try:
                async for entry in after.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_update):
                    if entry.target.id == after.id and getattr(entry.after, "timed_out_until", None):
                        embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=entry.user.mention)
                        if entry.reason:
                            embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=entry.reason)
                        break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

            await Logger.send_log(embed)
        else:
            embed = Logger.create_embed(
                "üîä –†–∞–∑–º—å—é—Ç",
                f"**–£—á–∞—Å—Ç–Ω–∏–∫:** {after.mention}",
                discord.Color.green()
            )

            try:
                async for entry in after.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_update):
                    if entry.target.id == after.id and not getattr(entry.after, "timed_out_until", None):
                        embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=entry.user.mention)
                        break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

            await Logger.send_log(embed)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π
    if before.roles != after.roles:
        added = [role.mention for role in after.roles if role not in before.roles]
        removed = [role.mention for role in before.roles if role not in after.roles]

        if added or removed:
            embed = Logger.create_embed(
                "üé≠ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π",
                f"**–£—á–∞—Å—Ç–Ω–∏–∫:** {after.mention}",
                discord.Color.blurple()
            )

            if added:
                embed.add_field(name="–î–æ–±–∞–≤–ª–µ–Ω—ã", value=", ".join(added), inline=False)
            if removed:
                embed.add_field(name="–£–¥–∞–ª–µ–Ω—ã", value=", ".join(removed), inline=False)

            try:
                async for entry in after.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_role_update):
                    if entry.target.id == after.id:
                        embed.add_field(name="–ò–∑–º–µ–Ω–∏–ª", value=entry.user.mention)
                        if entry.reason:
                            embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=entry.reason)
                        break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

            await Logger.send_log(embed)


# –†–æ–ª–∏
@bot.event
async def on_guild_role_create(role):
    embed = Logger.create_embed(
        "‚ûï –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å",
        f"**–†–æ–ª—å:** {role.mention}\n"
        f"**–¶–≤–µ—Ç:** {str(role.color)}\n"
        f"**–ü—Ä–∞–≤–∞:** {len(role.permissions)}",
        discord.Color.green()
    )

    try:
        async for entry in role.guild.audit_logs(limit=1, action=discord.AuditLogAction.role_create):
            embed.add_field(name="–°–æ–∑–¥–∞–ª", value=entry.user.mention)
            break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

    await Logger.send_log(embed)


@bot.event
async def on_guild_role_delete(role):
    embed = Logger.create_embed(
        "‚ûñ –£–¥–∞–ª–µ–Ω–∞ —Ä–æ–ª—å",
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {role.name}\n"
        f"**ID:** {role.id}",
        discord.Color.red()
    )

    try:
        async for entry in role.guild.audit_logs(limit=1, action=discord.AuditLogAction.role_delete):
            embed.add_field(name="–£–¥–∞–ª–∏–ª", value=entry.user.mention)
            break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

    await Logger.send_log(embed)


@bot.event
async def on_guild_role_update(before, after):
    changes = []

    if before.name != after.name:
        changes.append(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {before.name} ‚Üí {after.name}")
    if before.color != after.color:
        changes.append(f"**–¶–≤–µ—Ç:** {before.color} ‚Üí {after.color}")
    if before.permissions != after.permissions:
        changes.append("**–ò–∑–º–µ–Ω–µ–Ω—ã –ø—Ä–∞–≤–∞**")

    if changes:
        embed = Logger.create_embed(
            "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∞ —Ä–æ–ª—å",
            f"**–†–æ–ª—å:** {after.mention}\n" + "\n".join(changes),
            discord.Color.blue()
        )

        try:
            async for entry in after.guild.audit_logs(limit=1, action=discord.AuditLogAction.role_update):
                embed.add_field(name="–ò–∑–º–µ–Ω–∏–ª", value=entry.user.mention)
                break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

        await Logger.send_log(embed)


# –°–æ–æ–±—â–µ–Ω–∏—è
@bot.event
async def on_message_delete(message):
    if message.author.bot:
        return

    embed = Logger.create_embed(
        "üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        f"**–ö–∞–Ω–∞–ª:** {message.channel.mention}\n"
        f"**–ê–≤—Ç–æ—Ä:** {message.author.mention}",
        discord.Color.red()
    )

    if message.content:
        content = message.content
        # –ü–æ–∏—Å–∫ –º–µ–¥–∏–∞-—Å—Å—ã–ª–æ–∫
        media = re.findall(r'(https?://\S+\.(?:jpg|jpeg|png|gif|webp|mp3|wav|ogg))\b', content, re.IGNORECASE)
        for url in media:
            content = content.replace(url, f'[–º–µ–¥–∏–∞]({url})')
        embed.add_field(
            name="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ",
            value=content[:1000] + ("..." if len(content) > 1000 else ""),
            inline=False
        )

    if message.attachments:
        attachments = "\n".join(f'[{a.filename}]({a.url})' for a in message.attachments)
        embed.add_field(name="–í–ª–æ–∂–µ–Ω–∏—è", value=attachments, inline=False)
        # –ü—Ä–µ–≤—å—é –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for att in message.attachments:
            if any(att.filename.lower().endswith(ext) for ext in ['.png', '.jpg', '.jpeg', '.gif', '.webp']):
                embed.set_image(url=att.url)
                break

    try:
        async for entry in message.guild.audit_logs(limit=1, action=discord.AuditLogAction.message_delete):
            if entry.target.id == message.author.id:
                embed.add_field(name="–£–¥–∞–ª–∏–ª", value=entry.user.mention)
                break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

    await Logger.send_log(embed)


@bot.event
async def on_message_edit(before, after):
    if before.author.bot or before.content == after.content:
        return

    embed = Logger.create_embed(
        "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        f"**–ö–∞–Ω–∞–ª:** {before.channel.mention}\n"
        f"**–ê–≤—Ç–æ—Ä:** {before.author.mention}\n"
        f"**[–û—Ä–∏–≥–∏–Ω–∞–ª]({before.jump_url}):** {before.content[:1000]}{'...' if len(before.content) > 1000 else ''}\n"
        f"**–ò–∑–º–µ–Ω–µ–Ω–æ:** {after.content[:1000]}{'...' if len(after.content) > 1000 else ''}",
        discord.Color.blue()
    )
    await Logger.send_log(embed)


# –ö–∞–Ω–∞–ª—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.event
async def on_guild_channel_create(channel):
    embed = Logger.create_embed(
        "‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª",
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {channel.name}\n"
        f"**–¢–∏–ø:** {str(channel.type).capitalize()}\n"
        f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {channel.category.name if channel.category else '–ù–µ—Ç'}",
        discord.Color.green()
    )

    try:
        async for entry in channel.guild.audit_logs(limit=1, action=discord.AuditLogAction.channel_create):
            embed.add_field(name="–°–æ–∑–¥–∞–ª", value=entry.user.mention)
            break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

    await Logger.send_log(embed)


@bot.event
async def on_guild_channel_delete(channel):
    embed = Logger.create_embed(
        "‚ùå –£–¥–∞–ª–µ–Ω –∫–∞–Ω–∞–ª",
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {channel.name}\n"
        f"**–¢–∏–ø:** {str(channel.type).capitalize()}\n"
        f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {channel.category.name if channel.category else '–ù–µ—Ç'}",
        discord.Color.red()
    )

    try:
        async for entry in channel.guild.audit_logs(limit=1, action=discord.AuditLogAction.channel_delete):
            embed.add_field(name="–£–¥–∞–ª–∏–ª", value=entry.user.mention)
            break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

    await Logger.send_log(embed)


@bot.event
async def on_guild_channel_update(before, after):
    changes = []

    if before.name != after.name:
        changes.append(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {before.name} ‚Üí {after.name}")

    if isinstance(before, discord.TextChannel) and before.topic != after.topic:
        changes.append(f"**–¢–µ–º–∞:** {before.topic or '–ù–µ—Ç'} ‚Üí {after.topic or '–ù–µ—Ç'}")

    if changes:
        embed = Logger.create_embed(
            "üõ†Ô∏è –ò–∑–º–µ–Ω–µ–Ω –∫–∞–Ω–∞–ª",
            f"**–ö–∞–Ω–∞–ª:** {after.mention}\n" + "\n".join(changes),
            discord.Color.blue()
        )
        await Logger.send_log(embed)


@bot.event
async def on_guild_category_create(category):
    embed = Logger.create_embed(
        "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {category.name}",
        discord.Color.green()
    )

    try:
        async for entry in category.guild.audit_logs(limit=1, action=discord.AuditLogAction.channel_create):
            embed.add_field(name="–°–æ–∑–¥–∞–ª", value=entry.user.mention)
            break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

    await Logger.send_log(embed)


@bot.event
async def on_guild_category_delete(category):
    embed = Logger.create_embed(
        "‚ùå –£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {category.name}",
        discord.Color.red()
    )

    try:
        async for entry in category.guild.audit_logs(limit=1, action=discord.AuditLogAction.channel_delete):
            embed.add_field(name="–£–¥–∞–ª–∏–ª", value=entry.user.mention)
            break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

    await Logger.send_log(embed)


@bot.event
async def on_guild_category_update(before, after):
    if before.name != after.name:
        embed = Logger.create_embed(
            "üõ†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {before.name} ‚Üí {after.name}",
            discord.Color.blue()
        )
        await Logger.send_log(embed)


# –¢—Ä–µ–¥—ã
@bot.event
async def on_thread_create(thread):
    embed = Logger.create_embed(
        "‚úÖ –°–æ–∑–¥–∞–Ω —Ç—Ä–µ–¥",
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {thread.name}\n"
        f"**–ö–∞–Ω–∞–ª:** {thread.parent.mention if thread.parent else '–ù–µ—Ç'}",
        discord.Color.green()
    )

    try:
        async for entry in thread.guild.audit_logs(limit=1, action=discord.AuditLogAction.thread_create):
            embed.add_field(name="–°–æ–∑–¥–∞–ª", value=entry.user.mention)
            break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

    await Logger.send_log(embed)


@bot.event
async def on_thread_delete(thread):
    embed = Logger.create_embed(
        "‚ùå –£–¥–∞–ª–µ–Ω —Ç—Ä–µ–¥",
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {thread.name}\n"
        f"**–ö–∞–Ω–∞–ª:** {thread.parent.mention if thread.parent else '–ù–µ—Ç'}",
        discord.Color.red()
    )

    try:
        async for entry in thread.guild.audit_logs(limit=1, action=discord.AuditLogAction.thread_delete):
            embed.add_field(name="–£–¥–∞–ª–∏–ª", value=entry.user.mention)
            break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–∞: {e}")

    await Logger.send_log(embed)


@bot.event
async def on_thread_update(before, after):
    changes = []

    if before.name != after.name:
        changes.append(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {before.name} ‚Üí {after.name}")

    if before.archived != after.archived:
        status = "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω" if after.archived else "–†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω"
        changes.append(f"**–°—Ç–∞—Ç—É—Å:** {status}")

    if changes:
        embed = Logger.create_embed(
            "üõ†Ô∏è –ò–∑–º–µ–Ω–µ–Ω —Ç—Ä–µ–¥",
            f"**–¢—Ä–µ–¥:** {after.mention}\n" + "\n".join(changes),
            discord.Color.blue()
        )
        await Logger.send_log(embed)


# –°–µ—Ä–≤–µ—Ä
@bot.event
async def on_guild_update(before, after):
    changes = []

    if before.name != after.name:
        changes.append(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {before.name} ‚Üí {after.name}")

    if before.icon != after.icon:
        changes.append("**–ò–∫–æ–Ω–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞**")
        if after.icon:
            changes.append(f"[–ù–æ–≤–∞—è –∏–∫–æ–Ω–∫–∞]({after.icon.url})")

    if changes:
        embed = Logger.create_embed(
            "üõ†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞",
            "\n".join(changes),
            discord.Color.gold()
        )
        await Logger.send_log(embed)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    if not TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    if not LOG_CHANNEL_ID:
        raise ValueError("ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

    bot.run(TOKEN)